using System.Collections.Generic;

namespace TwitterClient.Core.Facade
{
    public interface IHttpUtils
    {
        /// <summary>
        /// The oauth_nonce parameter is a unique token your application should generate for each unique request. 
        /// Twitter will use this value to determine whether a request has been submitted multiple times. 
        /// The value for this request was generated by base64 encoding 32 bytes of random data, and stripping out 
        /// all non-word characters, but any approach which produces a relatively random alphanumeric string should be OK here.
        /// </summary>
        /// <returns>nonce</returns>
        string GenerateNonce();

        /// <summary>
        /// The oauth_timestamp parameter indicates when the request was created. This value should be the number of
        ///  seconds since the Unix epoch at the point the request is generated, and should be easily generated in most
        ///  programming languages. Twitter will reject requests which were created too far in the past, so it is important
        ///  to keep the clock of the computer generating requests in sync with NTP.
        /// </summary>
        /// <returns>timestamp</returns>
        string GenerateTimeStamp();

        /// <summary>
        /// The three values collected so far must be joined to make a single string, from which the signature 
        /// will be generated. This is called the signature base string by the OAuth specification.
        ///To encode the HTTP method, base URL, and parameter string into a single string:
        ///Convert the HTTP Method to uppercase and set the output string equal to this value.
        ///Append the ‘&’ character to the output string.
        ///Percent encode the URL and append it to the output string.
        ///Append the ‘&’ character to the output string.
        ///Percent encode the parameter string and append it to the output string.
        /// </summary>
        /// <param name="httpMethod">POST or GET</param>
        /// <param name="url">URL</param>
        /// <param name="parametersString">String with request parameters</param>
        /// <returns></returns>
        string CreateSignatureBaseString(string httpMethod, string url, string parametersString);
        /// <summary>
        /// Both of these values need to be combined to form a signing key which will be used to generate the signature. 
        /// The signing key is simply the percent encoded consumer secret, followed by an ampersand character ‘&’, followed by 
        /// the percent encoded token secret
        /// </summary>
        /// <param name="consumerSecret"></param>
        /// <param name="accessTokenSecret"></param>
        /// <returns></returns>
        string CreateSigningKey(string consumerSecret, string accessTokenSecret);
        string CreateSignature(string signatureBaseString, string signingKey);
        /// <summary>
        /// Encodes a value for inclusion in a URL querystring.
        /// https://dev.twitter.com/oauth/overview/percent-encoding-parameters
        /// </summary>
        /// <param name="value">The value to Url encode</param>
        /// <returns>Returns a Url encoded string</returns>
        string Encode(string value);
        string GetParametersString(IEnumerable<KeyValuePair<string, string>> parameters, string delimiter = "");
        IEnumerable<KeyValuePair<string, string>> ParseParameterString(string parameterString);

        string UnescapeUnicode(string data);
    }
}